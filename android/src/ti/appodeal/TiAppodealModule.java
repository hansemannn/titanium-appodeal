/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.appodeal;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;

import android.util.AttributeSet;
import android.util.Xml;
import android.view.ViewGroup;

import org.appcelerator.titanium.TiApplication;

import com.appodeal.ads.Appodeal;
import com.appodeal.ads.NativeAd;
import com.appodeal.ads.BannerView;
import com.appodeal.ads.BannerCallbacks;
import com.appodeal.ads.InterstitialCallbacks;
import com.appodeal.ads.RewardedVideoCallbacks;
import com.appodeal.ads.NativeCallbacks;
import com.appodeal.ads.utils.Log;
import org.appcelerator.titanium.proxy.TiViewProxy;

import java.util.concurrent.atomic.AtomicInteger;
import java.io.IOException;
import java.io.StringReader;

import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

@Kroll.module(name="TiAppodeal", id="ti.appodeal")
public class TiAppodealModule extends KrollModule
{
	private static final String LCAT = "TiAppodealModule";

	private static final AtomicInteger sNextGeneratedId = new AtomicInteger(1);

	@Kroll.constant public static final int LOG_LEVEL_OFF = 0;
	@Kroll.constant public static final int LOG_LEVEL_ERROR = 1; // not supported natively
	@Kroll.constant public static final int LOG_LEVEL_WARNING = 2; // not supported natively
	@Kroll.constant public static final int LOG_LEVEL_INFO = 3; // not supported natively
	@Kroll.constant public static final int LOG_LEVEL_DEBUG = 4;
	@Kroll.constant public static final int LOG_LEVEL_VERBOSE = 5;

	@Kroll.constant public static final int SHOW_STYLE_INTERSTITIAL = Appodeal.INTERSTITIAL;
	@Kroll.constant public static final int SHOW_STYLE_BANNER_BOTTOM = Appodeal.BANNER_BOTTOM;
	@Kroll.constant public static final int SHOW_STYLE_BANNER_TOP = Appodeal.BANNER_TOP;
	@Kroll.constant public static final int SHOW_STYLE_REWARDED_VIDEO = Appodeal.REWARDED_VIDEO;

	// Methods
	@Kroll.method
	public void initialize(KrollDict args, Object containerView)
	{
		String apiKey = args.getString("apiKey");
		boolean hasConsent = args.optBoolean("hasConsent", true);

		// String attributes = "<attribute xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:id=\"myId\" />";

		// XmlPullParserFactory factory = null;
		// try {
		// 	factory = XmlPullParserFactory.newInstance();
		// 	factory.setNamespaceAware(true);
		// 	XmlPullParser parser = factory.newPullParser();
		// 	parser.setInput(new StringReader(attributes));
		// 	parser.next();
		// 	AttributeSet attrs = Xml.asAttributeSet(parser);
			
		// 	BannerView bannerView = new BannerView(TiApplication.getAppRootOrCurrentActivity(), attrs);

		// 	if (containerView instanceof TiViewProxy) {
		// 		((ViewGroup)((TiViewProxy)containerView).getOrCreateView().getOuterView().getParent()).addView(bannerView, 0, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT));
		// 	}

		// 	Appodeal.setBannerViewId(bannerView.getId());
		// } catch (XmlPullParserException e) {
		// 	e.printStackTrace();
		// } catch (IOException e) {
		// 	e.printStackTrace();
		// }
		
		Appodeal.disableLocationPermissionCheck();
		Appodeal.initialize(TiApplication.getAppRootOrCurrentActivity(), apiKey, Appodeal.INTERSTITIAL | Appodeal.REWARDED_VIDEO | Appodeal.BANNER | Appodeal.NATIVE, hasConsent);

		// Interstitial callbacks
		Appodeal.setInterstitialCallbacks(new InterstitialCallbacks() {
			@Override
			public void onInterstitialLoaded(boolean isPrecache) {
				KrollDict event = new KrollDict();
				event.put("isPrecache", isPrecache);
				fireEvent("onInterstitialLoaded", event);
			}
			@Override
			public void onInterstitialFailedToLoad() {
				fireEvent("onInterstitialFailedToLoad", new KrollDict());
			}
			@Override
			public void onInterstitialShown() {
				fireEvent("onInterstitialShown", new KrollDict());
			}
			@Override
			public void onInterstitialClicked() {
				fireEvent("onInterstitialClicked", new KrollDict());
			}
			@Override
			public void onInterstitialClosed() {
				fireEvent("onInterstitialClosed", new KrollDict());
			}
			@Override
			public void onInterstitialExpired() {
				fireEvent("onInterstitialExpired", new KrollDict());
			}
		});

		// Banner callbacks
		Appodeal.setBannerCallbacks(new BannerCallbacks() {
			@Override
			public void onBannerLoaded(int height, boolean isPrecache) {
				KrollDict event = new KrollDict();
				event.put("isPrecache", isPrecache);
				fireEvent("onBannerLoaded", event);
			}
			@Override
			public void onBannerFailedToLoad() {
				fireEvent("onBannerFailedToLoad", new KrollDict());
			}
			@Override
			public void onBannerShown() {
				fireEvent("onBannerShown", new KrollDict());
			}
			@Override
			public void onBannerClicked() {
				fireEvent("onBannerClicked", new KrollDict());
			}
			@Override
			public void onBannerExpired() {
				fireEvent("onBannerExpired", new KrollDict());
			}
		});

		// Rewarded Video Callbacks
		Appodeal.setRewardedVideoCallbacks(new RewardedVideoCallbacks() {
			@Override
			public void onRewardedVideoLoaded(boolean isPrecache) {
				KrollDict event = new KrollDict();
				event.put("isPrecache", isPrecache);
				fireEvent("onRewardedVideoLoaded", event);
			}
			@Override
			public void onRewardedVideoFailedToLoad() {
				fireEvent("onRewardedVideoFailedToLoad", new KrollDict());
			}
			@Override
			public void onRewardedVideoShown() {
				fireEvent("onRewardedVideoShown", new KrollDict());
			}
			@Override
			public void onRewardedVideoFinished(double amount, String name) {
				KrollDict event = new KrollDict();
				event.put("amount", amount);
				event.put("name", name);
				fireEvent("onRewardedVideoFinished", event);
			}
			@Override
			public void onRewardedVideoClosed(boolean finished) {
				KrollDict event = new KrollDict();
				event.put("finished", finished);
				fireEvent("onRewardedVideoClosed", event);
			}
			@Override
			public void onRewardedVideoExpired() {
				fireEvent("onRewardedVideoExpired", new KrollDict());
			}
		});

		// Native Ads Callbacks
		Appodeal.setNativeCallbacks(new NativeCallbacks() {
			@Override
			public void onNativeLoaded() {
				fireEvent("onNativeLoaded", new KrollDict());
			}
			@Override
			public void onNativeFailedToLoad() {
				fireEvent("onNativeFailedToLoad", new KrollDict());
			}
			@Override
			public void onNativeShown(NativeAd nativeAd) {
				fireEvent("onNativeShown", new KrollDict());
			}
			@Override
			public void onNativeClicked(NativeAd nativeAd) {
				fireEvent("onNativeClicked", new KrollDict());
			}
			@Override
			public void onNativeExpired() {
				fireEvent("onNativeExpired", new KrollDict());
			}
		});
	}

	@Kroll.method
	public void showAd(int showType) {
		Appodeal.show(TiApplication.getAppRootOrCurrentActivity(), showType);
	}

	@Kroll.method
	public void hideBanner() {
		Appodeal.hide(TiApplication.getAppRootOrCurrentActivity(), Appodeal.BANNER);
	}

	@Kroll.method
	public KrollDict rewardForPlacement(String placement) {
		KrollDict dict = new KrollDict();

		dict.put("amount", Appodeal.getRewardParameters(placement).first);
		dict.put("currencyName", Appodeal.getRewardParameters(placement).second);

		return dict;
	}

	@Kroll.setProperty
	public void setLogLevel(int logLevel) {
		if (logLevel == TiAppodealModule.LOG_LEVEL_DEBUG) {
			Appodeal.setLogLevel(Log.LogLevel.debug);
		} else if (logLevel == TiAppodealModule.LOG_LEVEL_VERBOSE) {
			Appodeal.setLogLevel(Log.LogLevel.verbose);
		} else if (logLevel == TiAppodealModule.LOG_LEVEL_OFF) {
			Appodeal.setLogLevel(Log.LogLevel.none);
		} else {
			// Currently not supported on Android
		}
	}

	private int generateViewId() {
		for (;;) {
			final int result = sNextGeneratedId.get();
			// aapt-generated IDs have the high byte nonzero; clamp to the range under that.
			int newValue = result + 1;
			if (newValue > 0x00FFFFFF) newValue = 1; // Roll over to 1, not 0.
			if (sNextGeneratedId.compareAndSet(result, newValue)) {
				return result;
			}
		}
	}
}

